version: '3.8'

services:
  # Frontend (Next.js)
  frontend:
    build: 
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://security-backend:3001
      - NEXT_PUBLIC_ARBITRAGE_API_URL=http://arbitron:8000
      - NEXT_PUBLIC_WS_URL=ws://arbitron:8000/ws
    depends_on:
      - security-backend
      - arbitron
    networks:
      - crypto-bot-network

  # Security Backend (Manus AI)
  security-backend:
    build: 
      context: ./security-backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - JWT_SECRET=your-super-secret-jwt-key-production
      - REFRESH_TOKEN_SECRET=your-refresh-token-secret-production
      - ENCRYPTION_KEY=your-32-byte-hex-encryption-key-production
      - DATABASE_URL=postgresql://user:securepass@postgres:5432/security_db
      - CORS_ORIGIN=http://frontend:3000
    depends_on:
      - postgres
    networks:
      - crypto-bot-network

  # Arbitron (Motor de Arbitragem)
  arbitron:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://user:securepass@postgres:5432/arbitrage_db
      - API_HOST=0.0.0.0
      - API_PORT=8000
    depends_on:
      - redis
      - postgres
    networks:
      - crypto-bot-network

  # PostgreSQL Database
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=securepass
      - POSTGRES_DB=crypto_bot_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - crypto-bot-network

  # Redis Cache
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - crypto-bot-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - security-backend
      - arbitron
    networks:
      - crypto-bot-network

volumes:
  postgres_data:
  redis_data:

networks:
  crypto-bot-network:
    driver: bridge
